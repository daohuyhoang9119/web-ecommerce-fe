"use strict";
!(function () {
  var t = $('[data-toggle="card-collapse"]'),
    e = $(".card-collapse");
  t.on({
    mouseenter: function () {
      $(this).find(".card-collapse").collapse("show");
    },
    mouseleave: function () {
      var t = $(this).find(".card-collapse");
      t.hasClass("collapsing")
        ? setTimeout(function () {
            t.collapse("hide");
          }, 350)
        : t.collapse("hide");
    },
  }),
    e.on({
      "show.bs.collapse": function () {
        var t = $(this),
          e = t.closest(".card-collapse-parent"),
          a = t.outerHeight(!0);
        e.css({
          "-webkit-transform": "translateY(-" + a + "px)",
          transform: "translateY(-" + a + "px)",
        });
      },
      "hide.bs.collapse": function () {
        $(this).closest(".card-collapse-parent").css({
          "-webkit-transform": "",
          transform: "",
        });
      },
    });
})(),
  $('[data-toggle="collapse"][data-action]').on("click", function (t) {
    t.stopPropagation();
    var e = $(this),
      a = e.data("action"),
      o = e.data("target");
    $(o).collapse(a);
  }),
  (function () {
    var t = document.querySelectorAll("[data-countdown]");

    function n(t, e) {
      var a = t - new Date().getTime(),
        o = Math.floor(a / 864e5);
      o = o < 10 ? "0" + o : o;
      var n = Math.floor((a % 864e5) / 36e5);
      n = n < 10 ? "0" + n : n;
      var l = Math.floor((a % 36e5) / 6e4);
      l = l < 10 ? "0" + l : l;
      var i = Math.floor((a % 6e4) / 1e3);
      (i = i < 10 ? "0" + i : i),
        (e.querySelector("[data-days]").innerHTML = o),
        (e.querySelector("[data-hours]").innerHTML = n),
        (e.querySelector("[data-minutes]").innerHTML = l),
        (e.querySelector("[data-seconds]").innerHTML = i);
    }
    t.length &&
      [].forEach.call(t, function (t) {
        var e, a, o;
        (a = (e = t).dataset.date),
          n((o = new Date(a).getTime()), e),
          setInterval(function () {
            n(o, e);
          }, 1e3);
      });
  })(),
  (function () {
    var n = $(".dropright"),
      l = $(".dropdown-menu"),
      o = $('[data-toggle="collapse"]'),
      e = $(".navbar-collapse"),
      t = $(".navbar .dropdown"),
      a = $('.navbar .nav-link[data-toggle="smooth-scroll"]');
    $('.navbar .dropdown-menu .dropright [data-toggle="dropdown"]').on(
      "click",
      function (t) {
        t.preventDefault(), t.stopPropagation();
        var e = $(this),
          a = e.closest(n).find(l),
          o = e.closest(l).find(l).not(a);
        a.toggleClass("show"), o.removeClass("show");
      }
    ),
      t.on("hide.bs.dropdown", function () {
        var t = $(this),
          e = t.find(n).find(l),
          a = t.find(o);
        e.removeClass("show"),
          a.each(function () {
            var t = $(this);
            ($(t.attr("href")) || $(t.data("target"))).collapse("hide");
          });
      }),
      a.on("click", function (t) {
        $(this).closest(e).collapse("hide");
      });
  })(),
  (Flickity.defaults.pageDots = !1),
  (Flickity.defaults.prevNextButtons = !1),
  (Flickity.defaults.imagesLoaded = !0),
  (Flickity.defaults.initialIndex = 0),
  (Flickity.defaults.wrapAround = !0),
  (Flickity.defaults.cellAlign = "left"),
  $('[data-toggle="flickity"]').on("click", function () {
    var t = $(this),
      e = t.data("slide"),
      a = t.data("target");
    $(a).flickity("select", e, !0, !0);
  }),
  (function () {
    var a,
      o = !1;
    document.body.addEventListener("touchstart", function (t) {
      t.target.closest(".flickity-slider")
        ? ((o = !0),
          (a = {
            x: t.touches[0].pageX,
            y: t.touches[0].pageY,
          }))
        : (o = !1);
    }),
      document.body.addEventListener(
        "touchmove",
        function (t) {
          if (o && t.cancelable) {
            var e = {
              x: t.touches[0].pageX - a.x,
              y: t.touches[0].pageY - a.y,
            };
            7 < Math.abs(e.x) && t.preventDefault();
          }
        },
        {
          passive: !1,
        }
      );
  })(),
  (function () {
    var t = document.querySelectorAll('[data-toggle="form-caption"]');
    [].forEach.call(t, function (a) {
      a.addEventListener("change", function () {
        var t = document.querySelector(a.dataset.target),
          e = a.value;
        t.innerHTML = e;
      });
    });
  })(),
  (function () {
    var t = document.querySelectorAll(".highlight");
    "undefined" != typeof hljs &&
      t &&
      [].forEach.call(t, function (t) {
        hljs.highlightBlock(t);
      });
  })(),
  (function () {
    var t = document.querySelectorAll(".img-comp-input");
    [].forEach.call(t, function (o) {
      "input change".split(" ").forEach(function (t) {
        o.addEventListener(t, function () {
          var t, e, a;
          (e = (t = o).parentElement.querySelector(".img-comp-front")),
            (a = t.parentElement.querySelector(".img-comp-handle")),
            (e.style.maxWidth = t.value + "%"),
            (a.style.left = t.value + "%");
        });
      });
    });
  })(),
  $('[data-toggle="lists"]').each(function () {
    var t = $(this),
      e = t.data("options");
    "undefined" != typeof List && new List(t.get(0), e);
  }),
  (function () {
    var t = document.querySelectorAll('[data-toggle="map"]');
    t &&
      [].forEach.call(t, function (t) {
        var e = parseInt(t.getAttribute("data-zoom")),
          a = JSON.parse(t.getAttribute("data-markers")),
          o = {
            lat: a[0].position[0],
            lng: a[0].position[1],
          },
          l = new google.maps.Map(t, {
            center: o,
            zoom: e,
            disableDefaultUI: !0,
          }),
          i = new google.maps.LatLngBounds();
        a.forEach(function (t, e) {
          var a = {
              lat: t.position[0],
              lng: t.position[1],
            },
            o = new google.maps.InfoWindow({
              content: t.info,
            }),
            n = new google.maps.Marker({
              position: a,
              map: l,
            });
          n.addListener("click", function () {
            o.open(l, n);
          }),
            i.extend(a);
        }),
          e || l.fitBounds(i);
      });
  })(),
  (function () {
    var o = $(".navbar-collapse");
    $("body").on(
      "mouseenter mouseleave",
      ".navbar-nav .dropdown, .navbar-nav .dropright",
      function (t) {
        if (!o.hasClass("show")) {
          var e = $(this),
            a = e.find('[data-toggle="dropdown"]');
          "mouseenter" === t.type
            ? (e.addClass("hovered"), a.dropdown("show"))
            : (a.dropdown("hide"), a.blur());
        }
      }
    );
  })(),
  $(function () {
    $('[data-toggle="popover"]').popover();
  }),
  (function () {
    var o = $(".rating"),
      n = $(".rating-form");
    $(".rating-input").on("change input", function () {
      var t = $(this),
        e = t.closest(n).find(o),
        a = t.val();
      e.attr("data-value", a);
    });
  })(),
  $('.collapse[data-toggle="simplebar"]').on({
    "shown.bs.collapse": function () {
      var t = $(this),
        e = $(t.data("target"));
      "undefined" != typeof SimpleBar && new SimpleBar(e.get(0));
    },
    "hidden.bs.collapse": function () {
      var t = $(this),
        e = $(t.data("target"));
      "undefined" != typeof SimpleBar &&
        SimpleBar.instances.get(e.get(0)).unMount();
    },
  }),
  (function () {
    var t = '[data-toggle="smooth-scroll"]';
    "undefined" != typeof SmoothScroll &&
      new SmoothScroll(t, {
        header: ".navbar.fixed-top",
        offset: function (t, e) {
          return e.dataset.offset ? e.dataset.offset : 0;
        },
      });
  })(),
  $(function () {
    $('[data-toggle="tooltip"]').tooltip();
  }),
  $('[data-toggle="vote"]').on("click", function (t) {
    t.preventDefault();
    var e = $(this),
      a = e.attr("data-count");
    e.attr("data-count", ++a);
  });

(function (b) {
  b.extend({
    date: function () {
      var a = Array.prototype.slice.call(arguments, 0);
      if (!a.length) return b.extend(!0, new Date(), b.date.methods);
      if (1 == a.length) {
        if (
          "number" == typeof a[0] ||
          ("string" == typeof a[0] && !isNaN(Date.parse(a[0]))) ||
          a[0] instanceof Date
        )
          return b.extend(!0, new Date(a[0]), b.date.methods);
        if ("string" == typeof a[0]) {
          var c = new Date();
          a.unshift(c);
          return b.date.apply(this, a);
        }
      } else if (1 < a.length) {
        if ("number" == typeof a[0]) {
          if ("number" !== typeof a[1])
            (c = new Date(a[0])),
              (a = Array.prototype.slice.call(arguments, 1));
          else {
            for (
              var c = [], d = 0;
              d < a.length && "number" === typeof a[d];
              d++
            )
              c.push(a[d]);
            c = new Date(c);
            a = Array.prototype.slice.call(arguments, d);
          }
          a.unshift(c);
          return b.date.apply(this, a);
        }
        if ("string" == typeof a[0])
          return (
            (c = new Date()),
            isNaN(Date.parse(a[0])) ||
              ((c = new Date(a[0])),
              (a = Array.prototype.slice.call(arguments, 1))),
            a.unshift(c),
            b.date.apply(this, a)
          );
        if (
          a[0] instanceof Date &&
          ((c = b.date(a[0])), "string" == typeof a[1])
        ) {
          if (c[a[1]]) return (d = a[1]), (a = a.slice(2)), c[d].apply(c, a);
          /compound|constants|pretty/.test(a[1]);
          return b.date.apply(this, [c, "format"].concat(a.slice(1)));
        }
      }
      throw Error("Incorrect Parameters:\t" + JSON.stringify(a));
    },
  });
  b.date.methods = {
    addYears: function (a) {
      this.setFullYear(this.getFullYear() + parseFloat(a));
      return b.date(this);
    },
    addMonths: function (a) {
      this.setMonth(this.getMonth() + parseFloat(a));
      return b.date(this);
    },
    addWeeks: function (a) {
      this.addDays(7 * parseFloat(a));
      return b.date(this);
    },
    addDays: function (a) {
      this.setDate(this.getDate() + parseFloat(a));
      return b.date(this);
    },
    addHours: function (a) {
      this.setHours(this.getHours() + parseFloat(a));
      return b.date(this);
    },
    addMinutes: function (a) {
      this.setMinutes(this.getMinutes() + parseFloat(a));
      return b.date(this);
    },
    addSeconds: function (a) {
      this.setSeconds(this.getSeconds() + parseFloat(a));
      return b.date(this);
    },
    getDayName: function (a) {
      var b = "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(
        " "
      );
      return a ? b[this.getDay()].substr(0, 3) : b[this.getDay()];
    },
    getMonthName: function (a) {
      var b = "January February March April May June July August September October November December".split(
        " "
      );
      return a ? b[this.getMonth()].substr(0, 3) : b[this.getMonth()];
    },
    getWeek: function () {
      var a = new Date(this.getFullYear(), 0, 1);
      return Math.ceil(((this - a) / 864e5 + a.getDay() + 1) / 7);
    },
    stdTimezoneOffset: function () {
      var a = new Date(this.getFullYear(), 0, 1),
        b = new Date(this.getFullYear(), 6, 1);
      return Math.max(a.getTimezoneOffset(), b.getTimezoneOffset());
    },
    dst: function () {
      return this.getTimezoneOffset() < this.stdTimezoneOffset();
    },
  };
  b.date.formats = {
    d: function () {
      var a = this.getDate();
      return 9 < a ? a : "0" + a;
    },
    D: function () {
      return getDayName(this, !0);
    },
    j: function () {
      return this.getDate();
    },
    l: function () {
      return getDayName(this);
    },
    N: function () {
      return this.getDay() + 1;
    },
    S: function () {
      var a = this.getDate();
      if (/1/.test(parseInt((a + "").charAt(0)))) return "th";
      a = parseInt((a + "").charAt(1));
      return 1 == a ? "st" : 2 == a ? "nd" : 3 == a ? "rd" : "th";
    },
    w: function () {
      return this.getDay();
    },
    z: function () {
      return Math.round(
        Math.abs(
          (this.getTime() - new Date("1/1/" + this.getFullYear()).getTime()) /
            864e5
        )
      );
    },
    W: function () {
      return getWeek(this);
    },
    F: function () {
      return getMonthName(this);
    },
    m: function () {
      var a = this.getMonth() + 1;
      return 9 < a ? a : "0" + a;
    },
    M: function () {
      return getMonthName(this, !0);
    },
    n: function () {
      return this.getMonth() + 1;
    },
    t: function () {
      return new Date(this.getFullYear(), this.getMonth() + 1, 0).getDate();
    },
    L: function () {
      var a = this.getFullYear();
      return (0 == a % 4 && 0 != a % 100) || 0 == a % 400;
    },
    o: function () {
      return parseInt(this.getFullYear());
    },
    Y: function () {
      return parseInt(this.getFullYear());
    },
    y: function () {
      return parseInt((this.getFullYear() + "").substr(-2));
    },
    a: function () {
      return 12 <= this.getHours() ? "pm" : "am";
    },
    A: function () {
      return 12 <= this.getHours() ? "PM" : "AM";
    },
    B: function () {
      return (
        "@" +
        (
          "00" +
          Math.floor(
            (60 * (((this.getHours() + 1) % 24) * 60 + this.getMinutes()) +
              this.getSeconds() +
              0.001 * this.getMilliseconds()) /
              86.4
          )
        ).slice(-3)
      );
    },
    g: function () {
      var a = this.getHours();
      return 0 == a ? 12 : 12 >= a ? a : a - 12;
    },
    G: function () {
      return this.getHours();
    },
    h: function () {
      var a = this.getHours(),
        a = 12 >= a ? a : a - 12;
      return 0 == a ? 12 : 9 < a ? a : "0" + a;
    },
    H: function () {
      var a = this.getHours();
      return 9 < a ? a : "0" + a;
    },
    i: function () {
      var a = this.getMinutes();
      return 9 < a ? a : "0" + a;
    },
    s: function () {
      var a = this.getSeconds();
      return 9 < a ? a : "0" + a;
    },
    u: function () {
      return this.getMilliseconds();
    },
    e: function () {
      var a = this.toString().match(/ ([A-Z]{3,4})([-|+]?\d{4})/);
      return 1 < a.length ? a[1] : "";
    },
    I: function () {
      var a = new Date(this.getFullYear(), 0, 1),
        b = new Date(this.getFullYear(), 6, 1),
        a = Math.max(a.getTimezoneOffset(), b.getTimezoneOffset());
      return this.getTimezoneOffset() < a ? 1 : 0;
    },
    O: function () {
      var a = this.toString().match(/ ([A-Z]{3,4})([-|+]?\d{4})/);
      return 2 < a.length ? a[2] : "";
    },
    P: function () {
      var a = this.toString().match(/ ([A-Z]{3,4})([-|+]?\d{4})/);
      return 2 < a.length ? a[2].substr(0, 3) + ":" + a[2].substr(3, 2) : "";
    },
    T: function () {
      return this.toLocaleString("en", { timeZoneName: "short" })
        .split(" ")
        .pop();
    },
    Z: function () {
      return 60 * this.getTimezoneOffset();
    },
    c: function () {
      return addHours(
        new Date(this),
        -(this.getTimezoneOffset() / 60)
      ).toISOString();
    },
    r: function () {
      return addHours(
        new Date(this),
        -(this.getTimezoneOffset() / 60)
      ).toISOString();
    },
    U: function () {
      return (this.getTime() / 1e3) | 0;
    },
  };
  b.date.compound = {
    commonLogFormat: "d/M/Y:G:i:s",
    exif: "Y:m:d G:i:s",
    isoYearWeek: "Y\\WW",
    isoYearWeek2: "Y-\\WW",
    isoYearWeekDay: "Y\\WWj",
    isoYearWeekDay2: "Y-\\WW-j",
    mySQL: "Y-m-d h:i:s",
    postgreSQL: "Y.z",
    postgreSQL2: "Yz",
    soap: "Y-m-d\\TH:i:s.u",
    soap2: "Y-m-d\\TH:i:s.uP",
    unixTimestamp: "@U",
    xmlrpc: "Ymd\\TG:i:s",
    xmlrpcCompact: "Ymd\\tGis",
    wddx: "Y-n-j\\TG:i:s",
  };
  b.date.constants = {
    AMERICAN: "F j, Y",
    AMERICANSHORT: "m/d/Y",
    AMERICANSHORTWTIME: "m/d/Y h:i:sA",
    ATOM: "Y-m-d\\TH:i:sP",
    COOKIE: "l, d-M-Y H:i:s T",
    EUROPEAN: "j F Y",
    EUROPEANSHORT: "d.m.Y",
    EUROPEANSHORTWTIME: "d.m.Y H:i:s",
    ISO8601: "Y-m-d\\TH:i:sO",
    LEGAL: "j F Y",
    RFC822: "D, d M y H:i:s O",
    RFC850: "l, d-M-y H:i:s T",
    RFC1036: "D, d M y H:i:s O",
    RFC1123: "D, d M Y H:i:s O",
    RFC2822: "D, d M Y H:i:s O",
    RFC3339: "Y-m-d\\TH:i:sP",
    RSS: "D, d M Y H:i:s O",
    W3C: "Y-m-d\\TH:i:sP",
  };
  b.date.pretty = {
    "pretty-a": "g:i.sA l jS \\o\\f F, Y",
    "pretty-b": "g:iA l jS \\o\\f F, Y",
    "pretty-c": "n/d/Y g:iA",
    "pretty-d": "n/d/Y",
    "pretty-e": "F jS - g:ia",
    "pretty-f": "g:iA",
    "pretty-g": "F jS, Y",
    "pretty-h": "F jS, Y g:mA",
  };
  b.date.methods.format = function (a, c) {
    if (a) {
      if ("compound" == a) {
        if (!1 === c) return this.format.compound;
        var d = {},
          e;
        for (e in b.date.compound) d[e] = this.format(b.date.compound[e]);
        return d;
      }
      if (b.date.compound[a]) return this.format(b.date.compound[a], c);
      if ("constants" == a) {
        if (!1 === c) return this.format.constants;
        d = {};
        for (e in b.date.constants) d[e] = this.format(b.date.constants[e]);
        return d;
      }
      if (b.date.constants[a]) return this.format(b.date.constants[a], c);
      if ("pretty" == a) {
        if (!1 === c) return this.format.pretty;
        d = {};
        for (e in b.date.pretty) d[e] = this.format(b.date.pretty[e]);
        return d;
      }
      if (b.date.pretty[a]) return this.format(b.date.pretty[a], c);
      var d = a.split(""),
        g = "";
      for (e in d) {
        var f = d[e];
        f &&
          /[a-z]/i.test(f) &&
          !/\\/.test(g + f) &&
          (d[e] = b.date.formats[f] ? b.date.formats[f].apply(this) : f);
        g = d[e];
      }
      return d.join("").replace(/\\/g, "");
    }
    return a;
  };
})(jQuery);
